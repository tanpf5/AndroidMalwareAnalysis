package a_ui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;

import libsvm.*;

import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.ToolBarManager;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.jface.viewers.CheckboxCellEditor;
import org.eclipse.jface.viewers.CheckboxTableViewer;
import org.eclipse.jface.viewers.ColumnWeightData;
import org.eclipse.jface.viewers.ComboBoxCellEditor;
import org.eclipse.jface.viewers.DoubleClickEvent;
import org.eclipse.jface.viewers.IDoubleClickListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.TableLayout;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TextCellEditor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ViewForm;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.events.VerifyEvent;
import org.eclipse.swt.events.VerifyListener;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.ToolBar;

import decompiler.AppAnalysis;
import decompiler.AppAnalysis.CompleteListener;

public class a_ui{
        /**
         * @param args
         */
	public static void appendMethodA(String fileName, String content) {
        try {
            // 打开一个随机访问文件流，按读写方式
            RandomAccessFile randomFile = new RandomAccessFile(fileName, "rw");
            // 文件长度，字节数
            long fileLength = randomFile.length();
            //将写文件指针移到文件尾。
            randomFile.seek(fileLength);
            randomFile.writeBytes(content);
            randomFile.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
   
	public static String[] result;
	
        public static void main(String[] args) {
                // TODO Auto-generated method stub
        	
        	
        	//___________________________________________主界面编写___________________________________________
        	
        	final Display display = new Display();
            final Shell shell = new Shell(display);
            final Shell shelln1 = new Shell(display);
            final Shell shelln2 = new Shell(display);
            
            Canvas canvas = new Canvas(shell, SWT.NO_BACKGROUND);
            
            //使用paintlistener，保证每次均重新绘制。
            canvas.addPaintListener(new PaintListener() {
                    public void paintControl(PaintEvent e) {
                            GC gc = e.gc;
                    //读图像
                    ImageData imageData = new ImageData("back1.jpg");
                             //这里是建立从左到右的渐进Alpha。
               byte[] alphaValues = new byte[imageData.height * imageData.width];
                            for (int j = 0; j < imageData.height; j++) {
                                    for (int i = 0; i < imageData.width; i++) {
                          alphaValues[j * imageData.width + i] = (byte) (255 - 255
                                                            * i / imageData.width);
                                    }
                            }
                            imageData.alphaData = alphaValues;
                            Image image = new Image(display, imageData);
                     //绘制                               
                    gc.drawImage(image,0,0);
                    }
            });
            
            
            
            
            final FillLayout fillLayout = new FillLayout();
            fillLayout.type = SWT.VERTICAL;
            
            shell.setLayout(fillLayout);
            shell.setSize(999, 584);
            shell.setText("CHECKING SYSTEM");
            
            shelln1.setLayout(fillLayout);
            shelln1.setSize(999, 584);
            shelln1.setText("Learning");
            
            shelln2.setSize(999, 584);
            shelln2.setText("Checking");
            Image image0 = new Image(display, "back2.jpg");
            shelln2.setBackgroundImage(image0);
            
            Font sysFont = display.getSystemFont();  
            Font songFont = new Font(display, "宋体", 22, SWT.NONE);  
            
            //_________________________________________________主界面控件________________________________________________
            
            Button button1 = new Button(canvas, 0); 
            button1.setBounds(500, 200, 439, 87);  
            button1.setText("学习!");  
            Image image1 = new Image(display, "but1.jpg");
            button1.setImage(image1);
            //button1.setImage(learnIcon);
            button1.addSelectionListener(new SelectionListener()  
            {  
             public void widgetSelected(SelectionEvent event)  
             {  
            	 	handleSelectionEvent();  
             }  
             private void handleSelectionEvent() {
				// TODO Auto-generated method stub
                 shelln1.open();
                 shelln1.setVisible(true);
			}
			public void widgetDefaultSelected(SelectionEvent event)  
             {}  
            }); 
            
            Button button2 = new Button(canvas, 0); 
            button2.setBounds(500, 400, 439, 87);  
            button2.setText("检测!");  
            Image image2 = new Image(display, "but2.jpg");
            button2.setImage(image2);
            //button2.setImage(checkIcon);
            button2.addSelectionListener(new SelectionListener()  
            {  
             public void widgetSelected(SelectionEvent event)  
             {  
              handleSelectionEvent();  
             }  
             private void handleSelectionEvent() {
				// TODO Auto-generated method stub
                 shelln2.open();
                 shelln2.setVisible(true);
			}
			public void widgetDefaultSelected(SelectionEvent event)  
             {}  
            });  
            
            Button button3 = new Button(canvas, 0); 
            button3.setBounds(850, 50, 119, 46);  
            button3.setText("退出!");
            button3.setToolTipText("退出!");
            Image image3 = new Image(display, "exit.jpg");
            button3.setImage(image3);
            //button3.setImage(exitIcon);
            button3.addSelectionListener(new SelectionListener()  
            {  
             public void widgetSelected(SelectionEvent event)  
             {  
              handleSelectionEvent();  
             }  
             private void handleSelectionEvent() {
				// TODO Auto-generated method stub
            	 System.exit(0);
			}
			public void widgetDefaultSelected(SelectionEvent event)  
             {}  
            });  
            
            //―――――――――――――――――――――――――――――――――――――――――――学习界面控件―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
            
         // 第一步：创建一个TableViewer对象。式样：MULTI可多选、H_SCROLL有水平滚动条、V_SCROLL

         // 有垂直滚动条、BORDER有边框、FULL_SELECTION整行选择
            
         ViewForm viewForm = new ViewForm(shelln1, SWT.NONE); //布局基座ViewForm

         //viewForm.setLayout(new FillLayout());

         final TableViewer tv=new TableViewer(viewForm, SWT.CHECK | SWT.MULTI |SWT.BORDER |SWT.FULL_SELECTION);

         final CheckboxTableViewer ctv = new CheckboxTableViewer(tv.getTable());
         
         MyActionGroup actionGroup = new MyActionGroup(tv, ctv); 

         actionGroup.fillContextMenu(new MenuManager());
         
         ToolBar toolBar = new ToolBar(viewForm, SWT.FLAT); // 创建一个ToolBar容器

         ToolBarManager toolBarManager = new ToolBarManager(toolBar); // 创建一个toolBar的管理器

         actionGroup.fillActionToolBars(toolBarManager); //将Action通过toolBarManager注入ToolBar中

         // 设置表格和工具栏在布局中的位置

         viewForm.setContent(tv.getControl());	// 主体：表格

         viewForm.setTopLeft(toolBar); // 顶端边缘：工具栏
         
         // 第二步：通过表格内含的Table对象设置布局方式

         Table table = tv.getTable();

         table.setHeaderVisible(true); // 显示表头

         table.setLinesVisible(true); // 显示表格线

         TableLayout layout = new TableLayout(); // 专用于表格的布局

         table.setLayout(layout);

         // 第三步：用TableColumn类创建表格列

         layout.addColumnData(new ColumnWeightData(13));// ID列宽13像素

         TableColumn col1 = new TableColumn(table, SWT.NONE);

         col1.setText("ID号");

         col1.addSelectionListener(new SelectionAdapter() {

         boolean asc = true; // 记录上一次的排序方式，默认为升序

         public void widgetSelected(SelectionEvent e) {

         // asc=true则ID的升序排序器，否则用降序

         tv.setSorter(asc ? MySorter.ID_ASC : MySorter.ID_DESC);

         asc = !asc;// 得到下一次排序方式

         }

         });
         
         layout.addColumnData(new ColumnWeightData(60));

         new TableColumn(table, SWT.NONE).setText("路径");

         layout.addColumnData(new ColumnWeightData(20));

         TableColumn col2 = new TableColumn(table, SWT.NONE);

         col2.setText("安全等级");

         col2.addSelectionListener(new SelectionAdapter() {

         boolean asc = true;

         public void widgetSelected(SelectionEvent e) {

         tv.setSorter(asc ? MySorter.LEVEL_ASC : MySorter.LEVEL_DESC);

         asc = !asc;

         }

         });

         layout.addColumnData(new ColumnWeightData(60));

         new TableColumn(table, SWT.NONE).setText("记录建立时间");
         
         layout.addColumnData(new ColumnWeightData(20));

         new TableColumn(table, SWT.NONE).setText("学习记录");

         // 第四步：设置内容器和标签器

         tv.setContentProvider(new TableViewerContentProvider());

         tv.setLabelProvider(new TableViewerLabelProvider());

         // 第五步：用TableViewer的setInput方法将数据输入到表格

         Object data = APPFactory.getAPPs();

         tv.setInput(data);
            
         tv.addDoubleClickListener(new IDoubleClickListener() {

			@Override
			public void doubleClick(DoubleClickEvent event) {
				// TODO Auto-generated method stub
				IStructuredSelection selection = (IStructuredSelection) event.getSelection();

	         	// 得到所选择的第一条实体对象（表格可以有多选），并进行类型转换

	         	APPEntity o = (APPEntity) selection.getFirstElement();
	         	
	         	FileDialog dialog = new FileDialog(shell,SWT.OPEN);
                //设置打开默认的路径
                dialog.setFilterPath(System.getProperty("java.home"));
                //设置所打开文件的扩展名
                dialog.setFilterExtensions(new String[] {"*.apk"});
                //设置显示到下拉框中的扩展名的名称
                dialog.setFilterNames( new String[]{"Text Files (*.apk)"});
                //打开窗口，返回用户所选的文件目录
                String file = dialog.open();
                o.setAddress(file);
                
                tv.refresh();
			}

         	});
         
         
         final Label lb1=new Label(shelln2,SWT.BORDER|SWT.CENTER);//深陷型、文字右对齐
         lb1.setBounds(10,70,500,55);
         lb1.setText("请选择要检测的APP：");
         lb1.setFont(new Font(display, "楷体", 26, SWT.NONE));//设置文字的字体字号
         
         final Label lb2=new Label(shelln2,SWT.BORDER|SWT.CENTER);//深陷型、文字右对齐
         lb2.setBounds(600,70,300,55);
         lb2.setText("该APP尚未检测");
         lb2.setFont(new Font(display, "楷体", 26, SWT.NONE));//设置文字的字体字号
         
         Button bt1=new Button(shelln2,SWT.PUSH|SWT.BORDER); //创建深陷型按钮
         bt1.setText("选择路径");
         bt1.setBounds(110,210,300,55);
         bt1.setFont(new Font(display, "楷体", 26, SWT.NONE));//设置文字的字体字号
         
         bt1.addSelectionListener(new SelectionListener()  
         {  
          public void widgetSelected(SelectionEvent event)  
          {  
           handleSelectionEvent();  
          }  
          private void handleSelectionEvent() {
				// TODO Auto-generated method stub
         	//创建一个打开对话框，样式设置为SWT.OPEN，其他也可以是SWT.SAVE、SWT.MULTI
              FileDialog dialog = new FileDialog(shell,SWT.OPEN);
              //设置打开默认的路径
              dialog.setFilterPath(System.getProperty("java.home"));
              //设置所打开文件的扩展名
              dialog.setFilterExtensions(new String[] {"*.apk"});
              //设置显示到下拉框中的扩展名的名称
              dialog.setFilterNames( new String[]{"Text Files (*.apk)"});
              //打开窗口，返回用户所选的文件目录
              String file = dialog.open();
              lb1.setText(file);
              lb1.setFont(new Font(display, "宋体", 8, SWT.NONE));//设置文字的字体字号
              lb1.update();
              System.out.print(lb1.getText());
              if ( file != null )
              {
               System.out.print(file);
              }
              lb2.setText("该APP尚未检测");
              lb1.setFont(new Font(display, "楷体", 12, SWT.NONE));
              lb2.update();
			}
			public void widgetDefaultSelected(SelectionEvent event)  
          {}  
         });  
         
         Button bt1_0=new Button(shelln2,SWT.PUSH|SWT.BORDER); //创建深陷型按钮
         bt1_0.setText("确认检测");
         bt1_0.setBounds(110,350,300,55);
         bt1_0.setFont(new Font(display, "楷体", 24, SWT.NONE));
         
         bt1_0.addSelectionListener(new SelectionListener()  
         {  
          public void widgetSelected(SelectionEvent event)  
          {  
           try {
			handleSelectionEvent();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  
          }  
          private void handleSelectionEvent() throws IOException {
				// TODO Auto-generated method stub
        	  
        	  Display.getDefault().syncExec(new Runnable() {
				    public void run() {
				    	lb2.setText("检测ING");
	                    lb2.setFont(new Font(display, "楷体", 24, SWT.NONE));//设置文字的字体字号
	                    lb2.update();
				    }
				    }); 
        	  
        	  if(lb1.getText()=="请选择要检测的APP："){
		    	  MessageDialog.openInformation(null, "测试结果","尚未选择APP");
		    	
		      }
        	  else{
        		  
        		  File f1 = new File("UCI-breast-cancer-test");
        		  File f2 = new File("UCI-breast-cancer-result");
        		  FileWriter fw1 =  new FileWriter(f1);
        		  FileWriter fw2 =  new FileWriter(f2);
        		  fw1.write("");
        		  fw2.write("");
        		  
        		  AppAnalysis.analysis(lb1.getText(), new CompleteListener(){

       				@Override
       				public void onAnalysisComplete(String[] argo) {
       					// TODO Auto-generated method stub
       					result = argo;
       					
       					for (int i = 0; i < argo.length; i++)
       					{
       						int indexofnode = i + 1 ;
       						appendMethodA("UCI-breast-cancer-test",indexofnode + ":"+argo[i]+" ");
       					}
       					appendMethodA("UCI-breast-cancer-test","\n");
       					
       					String[] testArgs = {"UCI-breast-cancer-test", "UCI-breast-cancer-tra.model", "UCI-breast-cancer-result"};
       			        try {
       			        	
       		        	    svm_predict.main(testArgs);
  						} catch (IOException e) {
  							// TODO Auto-generated catch block
  							e.printStackTrace();
  						}
       			        
       			     int judge = 0 ;
         			
                 	judge +=Integer.valueOf(result[29]).intValue();
                 	judge += Integer.valueOf(result[30]).intValue();
    			        
                 	if(judge>1){
               		  File f0 = new File("UCI-breast-cancer-result");
               		  FileWriter fw0 = null;
						try {
							fw0 = new FileWriter(f0);
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						appendMethodA("UCI-breast-cancer-result","3.0");
                 	}

       			        
       			     Display.getDefault().syncExec(new Runnable() {
 					    public void run() {
 					    	lb2.setText("检测完毕");
 		                    lb2.setFont(new Font(display, "楷体", 24, SWT.NONE));//设置文字的字体字号
 		                    lb2.update();
 					    }
 					    }); 
       			     
       				}
       				
       			});
        	  }
        	  
        	  
       
			}
			public void widgetDefaultSelected(SelectionEvent event)  
          {}  
         });  
         
         Button bt2=new Button(shelln2,SWT.PUSH|SWT.BORDER); //创建深陷型按钮
         bt2.setText("查看安全等级");
         bt2.setBounds(600,210,300,55);
         bt2.setFont(new Font(display, "楷体", 26, SWT.NONE));//设置文字的字体字号
         
         bt2.addSelectionListener(new SelectionListener()  
         {  
          public void widgetSelected(SelectionEvent event)  
          {  
           handleSelectionEvent();  
          }  
          private void handleSelectionEvent() {
        	  File file=new File("UCI-breast-cancer-result");
        	  InputStreamReader read = null;
			try {
				read = new InputStreamReader(
				  new FileInputStream(file));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}//考虑到编码格式
              BufferedReader bufferedReader = new BufferedReader(read);
              String lineTxt = null;
                      try {
						while((lineTxt = bufferedReader.readLine()) != null){
						      System.out.println(lineTxt);
						      if(lb1.getText()=="请选择要检测的APP："){
						    	  MessageDialog.openInformation(null, "测试结果","尚未选择APP");
						      }
						      else{
						    	  if(lb2.getText()=="该APP尚未检测"){
						    		  MessageDialog.openInformation(null, "测试结果",lb2.getText());
						    	  }
						    	  else if(lb2.getText()=="检测ING"){
						    		  MessageDialog.openInformation(null, "测试结果","测试中，不可查询");
						    	  }
						    	  else{
						    		  double val1 = Double.parseDouble(lineTxt);
						    		  int val = (int) Math.round(val1); 
						    		  String mess;
						    		  if(val==1){
						    			  mess = "安全软件" ;
						    		  }
						    		  else if(val==2){
						    			  mess = "中危软件" ;
						    		  }
						    		  else{
						    			  mess = "高危软件" ;  ;
						    		  }
						    		  lb2.setText(mess);
			 		                  lb2.setFont(new Font(display, "楷体", 24, SWT.NONE));//设置文字的字体字号
			 		                  lb2.update();
						    	  }
						      }
}
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
          }
			public void widgetDefaultSelected(SelectionEvent event)  
          {}  
         });  
         
         Button bt3=new Button(shelln2,SWT.PUSH|SWT.BORDER); //创建深陷型按钮
         bt3.setText("查看详细信息");
         bt3.setBounds(600,350,300,55);
         bt3.setFont(new Font(display, "楷体", 26, SWT.NONE));//设置文字的字体字号
         
         bt3.addSelectionListener(new SelectionListener()  
         {  
          public void widgetSelected(SelectionEvent event)  
          {  
           handleSelectionEvent();  
          }  
          private void handleSelectionEvent() {
        	  if(lb1.getText()=="请选择要检测的APP："){
		    	  MessageDialog.openInformation(null, "测试结果","尚未选择APP");
		      }
		      else{
		    	  if(lb2.getText()=="该APP尚未检测"){
		    		  MessageDialog.openInformation(null, "测试结果",lb2.getText());
		    	  }
		    	  else{
		    		  AppAnalysis.result(result);
		    	  }
		      }
          }
			public void widgetDefaultSelected(SelectionEvent event)  
          {}  
         });  
         
         
            shell.open();
            while (!shell.isDisposed()) {
                    if (!display.readAndDispatch())
                            display.sleep();
            }
            display.dispose();
        }
}
