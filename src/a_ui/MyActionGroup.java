package a_ui;

import libsvm.*;

import decompiler.AppAnalysis;
import decompiler.AppAnalysis.CompleteListener;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.ActionContributionItem;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IContributionItem;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.ToolBarManager;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.CheckboxTableViewer;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.Table;
import org.eclipse.ui.actions.ActionGroup;

public class MyActionGroup extends ActionGroup {
	
	public static String[][] result = new String[1000][];
	
	public static void appendMethodA(String fileName, String content) {
        try {
            // 打开一个随机访问文件流，按读写方式
            RandomAccessFile randomFile = new RandomAccessFile(fileName, "rw");
            // 文件长度，字节数
            long fileLength = randomFile.length();
            //将写文件指针移到文件尾。
            randomFile.seek(fileLength);
            randomFile.writeBytes(content);
            randomFile.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
	
	public static void test(final APPEntity o){
		AppAnalysis.analysis(o.getAddress(), new CompleteListener(){
			 	
  			 
				@Override
				public void onAnalysisComplete(String[] argo) {
					
					// TODO Auto-generated method stub
					
					long IDL = o.getId();
					int ID = (int)IDL;
					result[ID] = argo;
					
					appendMethodA("UCI-breast-cancer-tra",o.getLevel()+" ");
					String[] trainArgs = {"UCI-breast-cancer-tra"};//directory of training file  
			        try {
					String modelFile = svm_train.main(trainArgs);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
					for (int i = 0; i < argo.length; i++)
					{
						int indexofnode = i + 1 ;
						appendMethodA("UCI-breast-cancer-tra",indexofnode + ":"+argo[i]+" ");
					}
					appendMethodA("UCI-breast-cancer-tra","\n");
					
					Display.getDefault().syncExec(new Runnable() {
					    public void run() {
					    	o.setRecord("已学习");
			           		tv.refresh();
					    }
					    }); 
					
				}
				
			});
	}

		private static TableViewer tv;
		
		private CheckboxTableViewer ctv; //新增的语句
		
		private static Long num  = 3L;
		
		// 在Action要使用到TableViewer对象，所以通过构造函数把它传进来
		
		public MyActionGroup(TableViewer tv) {
		
		this.tv = tv;
		
		}
		
		public MyActionGroup(TableViewer v, CheckboxTableViewer ctv) {

			this.tv = v;

			this.ctv = ctv;

			}
		
		// 生成菜单Menu，并将两个Action传入
		
		public void fillContextMenu(IMenuManager mgr) {
		
		// 加入两个Action对象到菜单管理器
		
		MenuManager menuManager = (MenuManager) mgr;
		
		menuManager.add(new oneAction());
		
		menuManager.add(new twoAction());
		
		menuManager.add(new threeAction());
		
		// 生成Menu并挂在表格table上。menu和table两个对象互为对方的参数
		
		Table table = tv.getTable();
		
		Menu menu = menuManager.createContextMenu(table);
		
		table.setMenu(menu);
		
		}
		
		
		
		// “打开”的Action类
		
		private class oneAction extends Action {
		
		public oneAction() {setText("LEVEL:1(安全)");}
		
		public void run() {// 继承自Action的方法，动作代码写在此方法中
		
		IStructuredSelection selection = (IStructuredSelection) tv.getSelection();
		
		APPEntity o = (APPEntity) selection.getFirstElement();
		
		if (o == null)
		
		MessageDialog.openInformation(null, null, "请先选择记录");
		
		else
		
		o.setLevel(1);
		
		tv.refresh();
		
		}
		
		}
		
		
		
		private class twoAction extends Action {
			
			public twoAction() {setText("LEVEL:2(中危)");}
			
			public void run() {// 继承自Action的方法，动作代码写在此方法中
			
			IStructuredSelection selection = (IStructuredSelection) tv.getSelection();
			
			APPEntity o = (APPEntity) selection.getFirstElement();
			
			if (o == null)
			
			MessageDialog.openInformation(null, null, "请先选择记录");
			
			else
			
			o.setLevel(2);
			
			tv.refresh();
			
			}
			
			}
		
		private class threeAction extends Action {
			
			public threeAction() {setText("LEVEL:3(高危)");}
			
			public void run() {// 继承自Action的方法，动作代码写在此方法中
			
			IStructuredSelection selection = (IStructuredSelection) tv.getSelection();
			
			APPEntity o = (APPEntity) selection.getFirstElement();
			
			if (o == null)
			
			MessageDialog.openInformation(null, null, "请先选择记录");
			
			else
			
			o.setLevel(3);
			
			tv.refresh();
			
			}
			
			}
		
		
		// “刷新”的Action类

		private class RefreshAction extends Action {

		public RefreshAction() {setText("刷新");}

		public void run() {

		String[] trainArgs = {"UCI-breast-cancer-tra"};//directory of training file  
	        try {
			String modelFile = svm_train.main(trainArgs);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		tv.refresh(); //表格的刷新方法，界面会重新读取数据并显示

		}

		}	


	private class AddAction extends Action {
	
	public AddAction() {
	
	setText("增加");
	
	}
	
	public void run() {
	
	APPEntity o = createPeople();// 创建一个新实体对象
	
	tv.add(o);// 增加到表格界面中
	
	List list = (List) tv.getInput();
	
	list.add(o); // 增加到数据模型的List容器中
	
	// ....向数据库增加记录（略）
	
	}
	
	private APPEntity createPeople() {// 创建一个新实体对象
	
	APPEntity o = new APPEntity();
	
	num++; 
	
	o.setId(num);
	
	o.setAddress("请选择路径");
	
	o.setLevel(0);
	
	o.setCreateDate(new Date());
	
	o.setRecord("尚未学习");
	
	return o;
	
	}
	
	}
	
	
	
	private class RemoveAction extends Action {
	
	public RemoveAction() {
	
	setText("删除");
	
	}
	
	public void run() {

		if (ctv != null) {

		Object[ ] checkObj = ctv.getCheckedElements(); // 取得打勾的记录

		if (checkObj.length == 0) {// 判断是否有勾选复选框

		MessageDialog.openInformation(null, "提示", "请先勾选记录");

		return;

		}

		for (int i = 0; i < checkObj.length; i++) {

		APPEntity o = (APPEntity) checkObj[i];

		ctv.remove(o);// 从表格界面上删除

		List list = (List) tv.getInput();

		list.remove(o);// 从数据模型的List容器中删除

		// ....，从数据库中删除记录（略）

		}

		} else {

		IStructuredSelection s = (IStructuredSelection) tv.getSelection();

		if (s.isEmpty()) {// 判断是否有选择

		MessageDialog.openInformation(null, "提示", "请先选择");

		return;

		}

		for (Iterator it = s.iterator(); it.hasNext();) {

		APPEntity o = (APPEntity) it.next();

		tv.remove(o);// 从表格界面上删除

		List list = (List) tv.getInput();

		list.remove(o); // 从数据模型的List容器中删除

		// ....，从数据库中删除记录（略）

		}

		} 

		}

		}
	
	//新增的“全选”Action

	private class SelectAllAction extends Action {

	public SelectAllAction() {

	setText("全选");

	}
	public void run() {

		if (ctv != null) ctv.setAllChecked(true); //将所有复选框打勾

		}
	
	}



	//新增的“全不选”Action

	private class DeselectAction extends Action {

	public DeselectAction() {

	setText("全不选");

	}

	public void run() {

	if (ctv != null) ctv.setAllChecked(false); //取消所有复选框打勾

	}

	}
	
	private class MakesureAction extends Action {

		public MakesureAction() {

		setText("确定学习");

		}

		public void run() {

			if (ctv != null) {

				Object[ ] checkObj = ctv.getCheckedElements(); // 取得打勾的记录

				if (checkObj.length == 0) {// 判断是否有勾选复选框

				MessageDialog.openInformation(null, "提示", "请先勾选记录");

				return;

				}
				
				else if(checkObj.length > 1) {// 判断是否有多个复选框

					MessageDialog.openInformation(null, "提示", "请勾选单条记录学习");

					return;

					}
				

				for (int i = 0; i < checkObj.length; i++) {

					final APPEntity o = (APPEntity) checkObj[i];
					if(o.getAddress()=="请选择路径"){
						MessageDialog.openInformation(null, "提示", "请先选择APP");
					}
					else if(o.getLevel()==0){
						MessageDialog.openInformation(null, "提示", "请先指定安全等级");
					}
	           	 	else{
	           	 	Display.getDefault().syncExec(new Runnable() {
					    public void run() {
					    	o.setRecord("学习ING");
			           		tv.refresh();
					    }
					    }); 
	           	 		
	           	 	Display.getDefault().syncExec(new Runnable() {
					    public void run() {
					    	 test(o);
					    }
					    }); 
	           		
	           		 
	           		
	           	 }

				}

				} 
		}


		}
	
	
	private class RecordAction extends Action {

		public RecordAction() {

		setText("查看记录");

		}

		public void run() {

			if (ctv != null) {

				Object[ ] checkObj = ctv.getCheckedElements(); // 取得打勾的记录

				if (checkObj.length == 0) {// 判断是否有勾选复选框

				MessageDialog.openInformation(null, "提示", "请先勾选记录");

				return;

				}
				
				else if(checkObj.length > 1) {// 判断是否有多个复选框

					MessageDialog.openInformation(null, "提示", "请勾选单条记录学习");

					return;

					}

				for (int i = 0; i < checkObj.length; i++) {

					final APPEntity o = (APPEntity) checkObj[i];
					if(o.getRecord()=="尚未学习"){
						MessageDialog.openInformation(null, "提示", "请选择已经学习的APP");
					}
	           	 	else{
	           	 	long IDL = o.getId();
   					int ID = (int)IDL;
	           	 	AppAnalysis.result(result[ID]);
	           	 }

				}

				}

		}


		}
	
	// 自定义方法。生成Action对象，并通过工具栏管理器ToolBarManager填充进工具栏
	
	public void fillActionToolBars(ToolBarManager actionBarManager) {
	
	// 创建Action对象，一个按钮对应一个个的Action
	Action refreshAction = new RefreshAction();
	
	Action addAction = new AddAction();
	
	Action removeAction = new RemoveAction();
	
	Action selAllAction = new SelectAllAction();

	Action deselAction = new DeselectAction();
	
	Action makesureAction = new MakesureAction();
	
	Action recordAction = new RecordAction();
	
	// 将按钮通过工具栏管理器ToolBarManager填充进工具栏,如果用add(action)
	
	// 也是可以的，只不过只有文字没有图像。要显示图像需要将Action包装成
	
	// ActionContributionItem，在这里我们将包装的处理过程写成了一个方法
	
	actionBarManager.add(createContributionItem(refreshAction));
	
	actionBarManager.add(createContributionItem(addAction));
	
	actionBarManager.add(createContributionItem(removeAction));
	
	actionBarManager.add(createContributionItem(selAllAction));

	actionBarManager.add(createContributionItem(deselAction));
	
	actionBarManager.add(createContributionItem(makesureAction));
	
	actionBarManager.add(createContributionItem(recordAction));
	
	actionBarManager.update(true);// 更新工具栏，否则工具栏不显示任何按钮
	
	}
	
	
	
	// 将Action包装成ActionContributionItem类的方法。实际上Action加入到
	
	// ToolBarManager或MenuManager里时，也做了ActionContributionItem的包装，
	
	// 大家看它ToolBarManager的add(IAction)的源代码即知
	
	private IContributionItem createContributionItem(IAction action) {
	
	ActionContributionItem aci = new ActionContributionItem(action);
	
	//aci.setMode(ActionContributionItem.MODE_FORCE_TEXT);// 显示图像+文字
	
	return aci;
	
	}
	
	
	
	// 得到一个图像的ImageDescriptor对象
	
	private ImageDescriptor getImageDesc(String fileName) {
	
	try {
	
	URL url = new URL("file:icons/" + fileName);
	
	return ImageDescriptor.createFromURL(url);
	
	} catch (MalformedURLException e) {
	
	e.printStackTrace();
	
	}
	
	return null;
	
	}

}